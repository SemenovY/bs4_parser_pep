"""
Обязательная часть любого проекта — перехват ожидаемых ошибок.

В парсерах есть две наиболее распространённые ошибки:
не загрузилось содержимое страницы;
не нашёлся нужный тег.

Разберём способы логирования исключений на примере ошибки загрузки
данных RequestException.
Простая команда logging.error() запишет лишь текст исключения:
Сообщение в логах даёт понять только то, что ошибка произошла,
а вот в какой кусок кода смотреть, чтобы её исправить, информации нет.
С этим поможет параметр exc_info=True:
Точно такой же вывод в логи будет при более компактной записи с помощью метода
logging.exception(); он специально предназначен для использования
в конструкциях try-except:
Ошибка описана уже достаточно подробно, но можно получить ещё
больше информации. Для этого нужно добавить
параметр stack_info=True — он отвечает за вывод стека вызова функций:
Стек вызова функций выглядит как полный трейсбек с сообщением об ошибке,
но он указывает не на саму ошибку, а на операцию логирования.
"""
import logging

from requests import RequestException

from exceptions import ParserFindTagException


# Перехват ошибки RequestException.
def get_response(session, url):
    """
    Реализуем перехват ошибки RequestException.

    Информация о ней должна записываться в логи.
    """
    try:
        response = session.get(url)
        response.encoding = 'utf-8'
        if response is not None:
            return response
        else:
            return

    except RequestException:
        logging.exception(
            f'Возникла ошибка при загрузке страницы {url}',
            stack_info=True
        )


# Перехват ошибки поиска тегов.
def find_tag(soup, tag, attrs=None):
    """
    Нужно предусмотреть ситуацию, что нужного тега не окажется в HTML-коде.

    В таком случае программа должна завершить работу и
    записать ошибку в логи. Для этого создадим функцию,
    которая будет вызываться вместо обычного метода find().
    На вход функция find_tag() будет принимать три параметра.
    soup — это может быть как страница целиком, так и отдельный тег;
    tag — название искомого тега;
    attrs — опциональный параметр, словарь с атрибутами для поиска.
    Функция будет искать теги с атрибутами, которые переданы при её вызове,
    либо вообще с любыми атрибутами, на что указывает пустой
    словарь — attrs=(attrs or {}). Если тег не найдётся, программа
    завершит работу, а в логи и терминал выведется сообщение об ошибке.
    """
    searched_tag = soup.find(tag, attrs=(attrs or {}))
    if searched_tag is None:
        error_msg = f'Не найден тег {tag} {attrs}'
        logging.error(error_msg, stack_info=True)
        raise ParserFindTagException(error_msg)
    return searched_tag


# ヽ(´▽`)/

# kaonashi
# =^..^=______/
